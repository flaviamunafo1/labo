#Aqui se debe poner la carpeta de la computadora local
setwd("/Users/flaviamunafo/Desktop/mineriadedatos")   #Establezco el Working Directory
#Aqui se debe poner la carpeta de la computadora local
setwd("/Users/flaviamunafo/Desktop/mineriadedatos")   #Establezco el Working Directory
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("rpart")
require("parallel")
ksemillas  <- c(102191, 200177, 410551, 552581, 892237) #reemplazar por las propias semillas
particionar  <- function( data,  division, agrupa="",  campo="fold", start=1, seed=NA )
{
if( !is.na(seed) )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x )} ,   division,  seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
ArbolEstimarGanancia  <- function( semilla, param_basicos )
{
#particiono estratificadamente el dataset
particionar( dataset, division=c(70,30), agrupa="clase_ternaria", seed= semilla )  #Cambiar por la primer semilla de cada uno !
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",     #quiero predecir clase_ternaria a partir del resto
data= dataset[ fold==1],  #fold==1  es training,  el 70% de los datos
xval= 0,
control= param_basicos )  #aqui van los parametros del arbol
#aplico el modelo a los datos de testing
prediccion  <- predict( modelo,   #el modelo que genere recien
dataset[ fold==2],  #fold==2  es testing, el 30% de los datos
type= "prob") #type= "prob"  es que devuelva la probabilidad
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#calculo la ganancia en testing  qu es fold==2
ganancia_test  <- dataset[ fold==2,
sum( ifelse( prediccion[, "BAJA+2"]  >  1/60,
ifelse( clase_ternaria=="BAJA+2", 59000, -1000 ),
0 ) )]
#escalo la ganancia como si fuera todo el dataset
ganancia_test_normalizada  <-  ganancia_test / 0.3
return( ganancia_test_normalizada )
}
#------------------------------------------------------------------------------
#Aqui se debe poner la carpeta de la computadora local
setwd("/Users/flaviamunafo/Desktop/mineriadedatos")   #Establezco el Working Directory
#cargo los datos
dataset  <- fread("./datasets/paquete_premium_202011.csv")
param_basicos  <- list( "cp"=         -1,  #complejidad minima
"minsplit"=  2,  #minima cantidad de registros en un nodo para hacer el split
"minbucket"=  1,  #minima cantidad de registros en una hoja
"maxdepth"=  -1 ) #profundidad máxima del arbol
#Un solo llamado, con la semilla 17
ArbolEstimarGanancia( 17, param_basicos )
#la funcion mcmapply  llama a la funcion ArbolEstimarGanancia  tantas veces como valores tenga el vector  ksemillas
ganancias  <- mcmapply( ArbolEstimarGanancia,
ksemillas,   #paso el vector de semillas, que debe ser el primer parametro de la funcion ArbolEstimarGanancia
MoreArgs= list( param_basicos),  #aqui paso el segundo parametro
SIMPLIFY= FALSE,
mc.cores= 1 )  #se puede subir a 5 si posee Linux o Mac OS
#muestro la lista de las ganancias en testing para la particion realizada con cada semilla
ganancias
#paso la lista a vector
unlist(ganancias)
#finalmente calculo la media (promedio)  de las ganancias
mean( unlist(ganancias) )
#Arbol elemental con libreria  rpart
#Debe tener instaladas las librerias  data.table  ,  rpart   y rpart.plot
#cargo las librerias que necesito
require("data.table")
require("rpart")
require("rpart.plot")
#Aqui se debe poner la carpeta de SU computadora local
setwd("/Users/flaviamunafo/Desktop/mineriadedatos/labo")  #Establezco el Working Directory
#cargo los datos de 202011 que es donde voy a ENTRENAR el modelo
dtrain  <- fread("/Users/flaviamunafo/Desktop/mineriadedatos/datasets/paquete_premium_202011.csv")
#genero el modelo,  aqui se construye el arbol
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -1,   #esto significa no limitar la complejidad de los splits
minsplit=  2,     #minima cantidad de registros para que se haga el split
minbucket=  1,     #tamaño minimo de una hoja
maxdepth=   30 )    #profundidad maxima del arbol
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
